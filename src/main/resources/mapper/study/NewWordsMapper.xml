<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jeethink.study.mapper.NewWordsMapper">
    
    <resultMap type="NewWords" id="NewWordsResult">
        <result property="id"    column="ID"    />
        <result property="userId"    column="USER_ID"    />
        <result property="wordId"    column="WORD_ID"    />
        <result property="status"    column="STATUS"    />
        <result property="wrongTimes"    column="WRONG_TIMES"    />
        <result property="rightTimes"    column="RIGHT_TIMES"    />
        <result property="lastRigthTime"    column="LAST_RIGTH_TIME"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
        <result property="remark"    column="remark"    />
        <result property="word"    column="word"    />
        <result property="voice"    column="voice"    />

        <result property="challengeId"    column="challenge_id"    />
        <result property="challengeStatus"    column="challenge_status"    />
        <result property="challengePut"    column="challenge_put"    />
        <result property="challengeReply"    column="challenge_reply"    />

        <result property="reqIntervalTimes"    column="reqIntervalTimes"    />
        <result property="elapseTimes"    column="elapseTimes"    />
        <result property="reqCount"    column="reqCount"    />
        <collection property="meansList" column="WORD_ID" javaType="ArrayList"
                    ofType="com.jeethink.study.domain.Means" select="getMeansByWordID"/>
    </resultMap>

    <sql id="selectNewWordsVo">
        SELECT
          n.ID,
          n.USER_ID,
          n.WORD_ID,
          n.STATUS,
          n.WRONG_TIMES,
          n.RIGHT_TIMES,
          n.LAST_RIGTH_TIME,
          n.create_by,
          n.create_time,
          n.update_by,
          n.update_time,
          n.remark,
          w.`word`,
          w.`voice`,
          n.challenge_id,
          n.challenge_status,
          n.challenge_put,
          n.challenge_reply,
          IFNULL(s2.`SETTING_VALUE`,0) AS  reqIntervalTimes,
          IFNULL(TIMESTAMPDIFF(HOUR,n.`LAST_RIGTH_TIME`,NOW()),0) AS elapseTimes,
          s.reqCount
          FROM new_words n
           LEFT JOIN words w ON n.`WORD_ID` = w.`ID`

           LEFT JOIN (SELECT s1.`USER_ID`, MAX(s1.`SETTING_NAME`) AS reqCount
                FROM new_words_setting s1
                WHERE s1.`SETTING_TYPE` = 'memory_method'
                GROUP BY s1.`USER_ID`) s ON n.`USER_ID` = s.user_id

           LEFT JOIN new_words_setting s2 ON n.`RIGHT_TIMES`+1 = s2.`SETTING_NAME`
               AND s2.`SETTING_TYPE` = 'memory_method' AND s2.`USER_ID` = n.`USER_ID`
    </sql>

    <select id="selectNewWordsList" parameterType="NewWords" resultMap="NewWordsResult">
        <include refid="selectNewWordsVo"/>
        <where>
            <if test="challengeId == null "> and n.challenge_id is null </if>
            <if test="userId != null "> and n.USER_ID = #{userId} </if>
            <if test="wordId != null "> and n.WORD_ID = #{wordId}</if>
            <if test="word != null and word != '' "> and w.WORD = #{word}</if>
            <if test="status != null  and status != ''"> and n.STATUS = #{status}</if>
            <if test="wrongTimes != null "> and n.WRONG_TIMES = #{wrongTimes}</if>
            <if test="rightTimes != null "> and n.RIGHT_TIMES = #{rightTimes}</if>
            <if test="lastRigthTime != null "> and n.LAST_RIGTH_TIME = #{lastRigthTime}</if>
            <if test="lastRigthTime != null "> and n.LAST_RIGTH_TIME = #{lastRigthTime}</if>
        </where>
    </select>
    
    <select id="selectNewWordsById" parameterType="Long" resultMap="NewWordsResult">
        <include refid="selectNewWordsVo"/>
        where n.ID = #{id}
    </select>




    <resultMap type="NewWords" id="NewWordsRandomResult">
        <result property="id"    column="ID"    />
        <result property="userId"    column="USER_ID"    />
        <result property="wordId"    column="WORD_ID"    />
        <result property="status"    column="STATUS"    />
        <result property="wrongTimes"    column="WRONG_TIMES"    />
        <result property="rightTimes"    column="RIGHT_TIMES"    />
        <result property="lastRigthTime"    column="LAST_RIGTH_TIME"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
        <result property="remark"    column="remark"    />
        <result property="word"    column="word"    />
        <result property="challengePut"    column="challenge_put"    />
        <collection property="meansList" column="WORD_ID" javaType="ArrayList"
                    ofType="com.jeethink.study.domain.Means" select="getMeansByWordID"/>
    </resultMap>
    <select id="selectNewWordsRandomList" parameterType="NewWords" resultMap="NewWordsRandomResult">
             SELECT
                  n.ID,
                  n.USER_ID,
                  n.WORD_ID,
                  n.STATUS,
                  n.WRONG_TIMES,
                  n.RIGHT_TIMES,
                  n.LAST_RIGTH_TIME,
                  n.create_by,
                  n.create_time,
                  n.update_by,
                  n.update_time,
                  n.remark,
                  w.`word`,
                  n.challenge_put
            FROM new_words n
              LEFT JOIN words w ON n.`WORD_ID` = w.`ID`
              LEFT JOIN (SELECT s1.`USER_ID`, MAX(s1.`SETTING_NAME`) AS reqCount
                FROM new_words_setting s1
                WHERE s1.`SETTING_TYPE` = 'memory_method'
                GROUP BY s1.`USER_ID`) s ON n.`USER_ID` = s.user_id

              LEFT JOIN new_words_setting s2 ON n.`RIGHT_TIMES`+1 = s2.`SETTING_NAME`
                  AND s2.`SETTING_TYPE` = 'memory_method' AND s2.`USER_ID` = n.`USER_ID`

        <where>
           <if test="id != null "> and n.ID = #{id}</if>
           <if test="userId != null "> and n.USER_ID = #{userId} </if>
           <if test="challengeId != null "> and n.challenge_id = #{challengeId}</if>
           <if test="challengeId == null "> and n.challenge_id is null </if>
           <if test="challengeStatus != null and challengeStatus != ''"> and n.challenge_status = #{challengeStatus}</if>
           <if test="status != null"> and n.STATUS = #{status}</if>
           <if test="status == 'A'.toString()">
             <![CDATA[
                and n.`RIGHT_TIMES` < s.reqCount
                and IFNULL(TIMESTAMPDIFF(HOUR,n.`LAST_RIGTH_TIME`,NOW()),0) >= IFNULL(s2.`SETTING_VALUE`,0)
             ]]>
           </if>
        </where>
        <if test="challengeId == null "> ORDER BY RAND() </if>
    </select>

    <resultMap type="Means" id="MeansByWordIDResultMap">
        <result property="posName"    column="posName"    />
        <result property="posMean"    column="posMean"    />
        <result property="means"    column="means"    />
    </resultMap>
    <select id="getMeansByWordID" resultMap="MeansByWordIDResultMap" parameterType="java.lang.Integer" >
          SELECT
              p.`name` AS posName,
              p.`means` AS posMean,
              m.`means` AS means
              FROM  means m
              LEFT JOIN pos p ON m.`posID` = p.`ID`
              WHERE m.`wordID` = #{WORD_ID}
              ORDER BY  p.`ID`
    </select>



    <resultMap type="NewWordsCollect" id="SelectNewWordsCollectResultMap">
        <result property="userId"    column="USER_ID"    />
        <result property="allNum"    column="all_num"    />
        <result property="passNum"    column="pass_num"    />
        <result property="aliveNum"    column="alive_num"    />
        <result property="practiseNum"    column="practise_num"    />
    </resultMap>
    <select id="selectNewWordsCollect" parameterType="Long" resultMap="SelectNewWordsCollectResultMap">
     <![CDATA[
        SELECT
              n.`USER_ID`,
              COUNT(1) all_num,
              SUM(
                CASE
                  WHEN n.`RIGHT_TIMES` >= s.reqCount
                  THEN 1
                END
              ) AS pass_num,
              SUM(
                CASE
                  WHEN n.`RIGHT_TIMES` < s.reqCount
                  THEN 1
                END
              ) AS alive_num,
              SUM(
                CASE
                  WHEN IFNULL(TIMESTAMPDIFF(HOUR,n.`LAST_RIGTH_TIME`,NOW()),0) >= IFNULL(s2.`SETTING_VALUE`,0)  AND n.`RIGHT_TIMES` < s.reqCount
                  THEN 1
                END
              ) AS practise_num
            FROM
              new_words n
              LEFT JOIN
                (SELECT
                  s1.`USER_ID`,
                  MAX(s1.`SETTING_NAME`) AS reqCount
                FROM
                  new_words_setting s1
                WHERE s1.`SETTING_TYPE` = 'memory_method'
                  GROUP BY s1.`USER_ID`) s
                ON n.`USER_ID` = s.user_id
              LEFT JOIN new_words_setting s2 ON n.`RIGHT_TIMES`+1 = s2.`SETTING_NAME`
                  AND s2.`SETTING_TYPE` = 'memory_method' AND s2.`USER_ID` = n.`USER_ID`

            WHERE n.USER_ID = #{USER_ID}
              AND n.challenge_id IS NULL
            GROUP BY n.`USER_ID`

        ]]>
    </select>



    <resultMap type="NewWordsCollect" id="SelectChallengeCollectResultMap">
        <result property="userId"    column="USER_ID"    />
        <result property="yearMonth"    column="yearMonth"    />
        <result property="challengeNum"    column="challengeNum"    />
        <result property="challengePassNum"    column="challengePassNum"    />
        <result property="challengeFailNum"    column="challengeFailNum"    />
    </resultMap>
    <select id="selectChallengeCollect" parameterType="map" resultMap="SelectChallengeCollectResultMap">

        SELECT s3.`USER_ID`,
               s3.`SETTING_NAME` yearMonth,
               COUNT(n.`WORD_ID`) challengeNum,
               IFNULL(SUM(
                CASE
                  WHEN n.`challenge_status` = 'S'
                  THEN 1
                END
                  ),0) AS challengePassNum,
               IFNULL(SUM(
                CASE
                  WHEN n.`challenge_status` = 'F'
                  THEN 1
                END
                  ),0) AS challengeFailNum

              FROM
                new_words_setting s3
                <if test="TYPE == 'challenge'.toString() ">
                   LEFT JOIN new_words n ON DATE_FORMAT(n.`create_time`,'%Y-%m') = s3.`SETTING_NAME` AND s3.`USER_ID` = n.`challenge_id`
                </if>
                <if test="TYPE == 'challenger'.toString()  ">
                   LEFT JOIN new_words n ON DATE_FORMAT(n.`create_time`,'%Y-%m') = s3.`SETTING_NAME` AND s3.`USER_ID` = n.`USER_ID` AND n.`challenge_id` IS NOT NULL
                </if>
           WHERE  s3.`USER_ID` = #{USER_ID}
               AND s3.`SETTING_TYPE` = 'collect_target'
              GROUP BY s3.`SETTING_NAME`
            ORDER BY yearMonth  LIMIT 7

    </select>




    <resultMap type="NewWordsCollect" id="SelectExpectActualResultMap">
        <result property="userId"    column="USER_ID"    />
        <result property="yearMonth"    column="yearMonth"    />
        <result property="expectNum"    column="expectNum"    />
        <result property="actualNum"    column="actualNum"    />
        <result property="expectPassNum"    column="expectPassNum"    />
        <result property="actualPassNum"    column="actualPassNum"    />
        <result property="expectRightRatio"    column="expectRightRatio"    />
        <result property="actualRightRatio"    column="actualRightRatio"    />
    </resultMap>
    <select id="selectExpectActual" parameterType="Long" resultMap="SelectExpectActualResultMap">
     <![CDATA[
        SELECT s3.`USER_ID`,
               s3.`SETTING_NAME` yearMonth,
               COUNT(n.`WORD_ID`) actualNum,
               IFNULL(s3.`SETTING_VALUE`,0) expectNum,
                    IFNULL(SUM(
                        CASE
                          WHEN n.`RIGHT_TIMES` >= s.reqCount
                          THEN 1
                        END
                      ),0) AS actualPassNum,

               IFNULL(s3.`SETTING_VALUE_TWO`,0) expectPassNum,
               IFNULL(SUM(n.`RIGHT_TIMES`),0)/IFNULL(SUM(n.`RIGHT_TIMES`) + SUM(n.`WRONG_TIMES`) ,1) actualRightRatio,
               IFNULL(s3.`SETTING_VALUE_THREE`,0) expectRightRatio

          FROM
              new_words_setting s3

              LEFT JOIN new_words n ON DATE_FORMAT(n.`create_time`,'%Y-%m') = s3.`SETTING_NAME` AND s3.`USER_ID` = n.`USER_ID`  AND n.`challenge_id` IS NULL

              LEFT JOIN (SELECT s1.`USER_ID`, MAX(s1.`SETTING_NAME`) AS reqCount
                        FROM new_words_setting s1
                        WHERE s1.`SETTING_TYPE` = 'memory_method'
                        GROUP BY s1.`USER_ID`) s ON n.`USER_ID` = s.user_id

             WHERE s3.`USER_ID` = #{userId}
               AND s3.`SETTING_TYPE` = 'collect_target'
               GROUP BY s3.`SETTING_NAME`,s3.`SETTING_VALUE`,s3.`SETTING_VALUE_TWO`,s3.`SETTING_VALUE_THREE`
               ORDER BY yearMonth
        ]]>
    </select>


        
    <insert id="insertNewWords" parameterType="NewWords" useGeneratedKeys="true" keyProperty="id">
        insert into new_words
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">USER_ID,</if>
            <if test="wordId != null">WORD_ID,</if>
            <if test="status != null">STATUS,</if>
            <if test="wrongTimes != null">WRONG_TIMES,</if>
            <if test="rightTimes != null">RIGHT_TIMES,</if>
            <if test="lastRigthTime != null">LAST_RIGTH_TIME,</if>
            <if test="createBy != null">create_by,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateBy != null">update_by,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="remark != null">remark,</if>
            <if test="challengeId != null">challenge_id,</if>
            <if test="challengeStatus != null">challenge_status,</if>
            <if test="challengePut != null">challenge_put,</if>
            <if test="challengeReply != null">challenge_reply,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">#{userId},</if>
            <if test="wordId != null">#{wordId},</if>
            <if test="status != null">#{status},</if>
            <if test="wrongTimes != null">#{wrongTimes},</if>
            <if test="rightTimes != null">#{rightTimes},</if>
            <if test="lastRigthTime != null">#{lastRigthTime},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateBy != null">#{updateBy},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="remark != null">#{remark},</if>
            <if test="challengeId != null">#{challengeId},</if>
            <if test="challengeStatus != null">#{challengeStatus},</if>
            <if test="challengePut != null">#{challengePut},</if>
            <if test="challengeReply != null">#{challengeReply},</if>
         </trim>
    </insert>

    <update id="updateNewWords" parameterType="NewWords">
        update new_words
        <trim prefix="SET" suffixOverrides=",">
            <if test="userId != null">USER_ID = #{userId},</if>
            <if test="wordId != null">WORD_ID = #{wordId},</if>
            <if test="status != null">STATUS = #{status},</if>
            <if test="wrongTimes != null">WRONG_TIMES = #{wrongTimes},</if>
            <if test="rightTimes != null">RIGHT_TIMES = #{rightTimes},</if>
            <if test="lastRigthTime != null">LAST_RIGTH_TIME = #{lastRigthTime},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="remark != null">remark = #{remark},</if>
            <if test="challengeId != null">challenge_id = #{challengeId},</if>
            <if test="challengeStatus != null">challenge_status = #{challengeStatus},</if>
            <if test="challengePut != null">challenge_put = #{challengePut},</if>
            <if test="challengeReply != null">challenge_reply = #{challengeReply},</if>
        </trim>
        where ID = #{id}
    </update>

    <delete id="deleteNewWordsById" parameterType="Long">
        delete from new_words where ID = #{id}
    </delete>

    <delete id="deleteNewWordsByIds" parameterType="String">
        delete from new_words where ID in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>



    <resultMap type="FriendsDyn" id="FriendsDynResult">
        <result property="userId"    column="FRIEND_ID"    />
        <result property="wordId"    column="WORD_ID"    />
        <result property="userName"    column="user_name"    />
        <result property="nickName"    column="nick_name"    />
        <result property="createTime"    column="create_time"    />
        <result property="word"    column="word"    />
        <collection property="meansList" column="WORD_ID" javaType="ArrayList"
                    ofType="com.jeethink.study.domain.Means" select="getMeansByWordID"/>
    </resultMap>
    <select id="selectFriendsDyn" parameterType="NewWords" resultMap="FriendsDynResult">
         SELECT
              f.`FRIEND_ID`,
              u.`user_name`,
              u.`nick_name`,
              n.`WORD_ID`,
              w.`word`,
              n.`create_time`
            FROM
              friends f
              LEFT JOIN sys_user u
                ON f.`FRIEND_ID` = u.`user_id`
              LEFT JOIN new_words n
                ON f.`FRIEND_ID` = n.`USER_ID`
              LEFT JOIN words w
                ON n.`WORD_ID` = w.`ID`
            WHERE f.`USER_ID` = #{USER_ID}
              AND n.`WORD_ID` IS NOT NULL
            ORDER BY n.`create_time` DESC
            LIMIT 10
    </select>
    
</mapper>